@using Master40.DB.Models
@{
    ViewBag.Title = "Agent Basic";
    Layout = "_Layout";
    List<string> machines = (List<string>)ViewData["machines"];

    Kpi DirectoryAgent = (Kpi)ViewData["DirectoryAgent"];
    Kpi MachineAgent = (Kpi)ViewData["MachineAgent"];
    Kpi ComunicationAgent = (Kpi)ViewData["ComunicationAgent"];
    Kpi SystemAgent = (Kpi)ViewData["SystemAgent"];
    Kpi ContractAgent = (Kpi)ViewData["ContractAgent"];
    Kpi StorageAgent = (Kpi)ViewData["StorageAgent"];
    Kpi DispoAgent = (Kpi)ViewData["DispoAgent"];
    Kpi ProductionAgent = (Kpi)ViewData["ProductionAgent"];
    string holymoly = "";

    try
    {
        holymoly = @"graph LR;
                    System(<div style='width: 200px'><div class='floating'><img src='/images/Agents/System.svg' width='50'></div><div class='floating distance'><p><u>System Agent</u></p> Agent Count: " + @Html.Raw(SystemAgent.Count) + @"<br>Messages: " + SystemAgent.Value + @"<br>RunTime " + SystemAgent.Time + @"</div></div>)
                    Contract(<div style='width: 200px'><div class='floating'><img src='/images/Agents/VirtualAgent.png' width='40'></div><div class='floating distance'><p><u>Contract Agent</u></p> Agent Count: " + ContractAgent.Count + @"<br>Messages: " + ContractAgent.Value + @"<br>RunTime " + ContractAgent.Time + @"</div></div>)
                    Dispo(<div style='width: 250px'><div class='floating'><img src='/images/Agents/VirtualAgent.png' width='40'></div><div class='floating distance'><p><u>Dispo Agent</u></p> Agent Count: " + DispoAgent.Count + @"<br>Messages: " + DispoAgent.Value + @"<br>RunTime " + DispoAgent.Time + @"</div></div>)
                    Dir(<div style='width: 200px'><div class='floating'><img src='/images/Agents/VirtualAgent.png' width='40'></div><div class='floating distance'><p><u>Directory Agent</u></p> Agent Count: " + DirectoryAgent.Count + @"<br>Messages: " + DirectoryAgent.Value + @"<br>RunTime " + DirectoryAgent.Time + @"</div></div>)
                    Stock(<div style='width: 200px'><div class='floating'><img src='/images/Agents/StockAgent.svg' width='40'></div><div class='floating distance'><p><u>Stock Agent</u></p> Agent Count: " + StorageAgent.Count + @"<br>Messages: " + StorageAgent.Value + @"<br>RunTime " + StorageAgent.Time + @"</div></div>)    
                    Production(<div style='width: 220px'><div class='floating'><img src='/images/Agents/engineer.png' width='40'></div><div class='floating distance'><p><u>Production Agent</u></p> Agent Count: " + ProductionAgent.Count + @"<br>Messages: " + ProductionAgent.Value + @"<br>RunTime " + ProductionAgent.Time + @"</div></div>)    
                    Com(<div style='width: 250px'><div class='floating'><img src='/images/Agents/VirtualAgent.png' width='40'></div><div class='floating distance'><p><u>Communication Agent</u></p> Agent Count: " + ComunicationAgent.Count + @"<br>Messages: " + ComunicationAgent.Value + @"<br>RunTime " + ComunicationAgent.Time + @"</div></div>)    
                    Machine(<div style='width: 220px'><div class='floating'><img src='/images/Agents/MachineAgent.png' width='40'></div><div class='floating distance'><p><u>Machine Agent</u></p> Agent Count: " + MachineAgent.Count + @"<br>Messages: " + MachineAgent.Value + @"<br>RunTime " + MachineAgent.Time + @"</div></div>)    
                    Dir-->Machine
                    System-->Dispo
                    System-->Contract
                    Contract-->Dispo
                    Dispo-->Stock
                    Stock-->Dispo
                    Dispo-->Production
                    Stock-->Production
                    Production-->Stock
                    Production-->Com
                    Machine-->Dir
                    Com-->Machine
                    Dir-->Com
                    Machine-->Com
                    Com-->Production
                    Dir-->Production
                    Production-->Dir
                    Dispo-->Contract
                    Dispo-->System
                    Contract-->System";
    }
    catch (Exception e)
    {
        holymoly = "EmptyResult";
    }
    //class System back";
}
<link href="~/css/mermaid.css" rel="stylesheet" />
<style>
    .floating {
        float: left;
        height: 60px;
        line-height: 60px;
        text-align: center;
        vertical-align: middle;
    }
    .distance {
        margin-left: 10px;
        height: 85px;
        line-height: 120%;
        font-size: large;
        text-align: left;
    }

    .back > rect {
        fill: #008080;
        stroke: #2f4f4f;
        stroke-width: 1px;
    }
    
    pre {
        display:none;
    }
    svg .foreground path {
        fill: none;
        stroke: #F15A29;
        stroke-opacity: .7;
    }
    .axis path, .axis line {
        fill: none;
        stroke:black;
        shape-rendering: crispEdges;
    }
    .brush .extent {
        fill-opacity: .1;
        stroke: black;
        shape-rendering: crispEdges;
    }
    text {
        fill:black;
        /* font-family:'Sans serif'; */
        font-size: 14px;
    }

    .link {
        stroke: black;
    }

    line {
        stroke: black;
    }

    path {
        fill: none;
    }
</style>

<script src="~/js/mermaid.js"></script>
<script>mermaidAPI.initialize({ startOnLoad: true });</script>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2 col-sm-2">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        <h2>Control Panel </h2>
                        <p>
                            Container to Release the Force
                        </p>
                        <div class="panel-group" id="accordion">
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapseOne">Processing Options</a>
                                    </h4>
                                </div>
                                <div id="collapseOne" class="panel-collapse collapse in">
                                    <div class="panel-body">
                                        <p><a class="btn btn-default btn-block" href="#" onclick="startAgents()">Run All</a></p>
                                        <!--
                                        <P>Runthrough</P>
                                        <p><a class="btn btn-default btn-block" href="#" onclick="startBackward()">Start Agents</a></p>
                                        -->
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-danger">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">For Debugging Only</a>
                                    </h4>
                                </div>
                                <div id="collapseTwo" class="panel-collapse collapse">
                                    <div class="panel-body">
                                        <p><a class="btn btn-default btn-block" href="~/AgentSimulation/Run">Start Agents</a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-9 col-sm-8">
            <div class="container-fluid">
                <div class="row">
                    <h2>Agent System</h2>
                    <div class="panel-group" id="accordion">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a data-toggle="collapse" href="#collapse1" data-parent="#accordion">Agent Connections</a>
                                </h4>
                            </div>
                            <div id="collapse1" class="panel-collapse collapse in">
                                <div class="mermaid">
                                    @holymoly
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-group">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a data-toggle="collapse" href="#collapse2" data-parent="#accordion">Messages</a>
                                </h4>
                            </div>
                            <div id="collapse2" class="panel-collapse collapse">
                                <div id="" class="MessageDisplay"></div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-group">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4 class="panel-title">
                                    <a data-toggle="collapse" href="#hiveplot" data-parent="#accordion">Agent Communication Network as Hive Plot</a>
                                </h4>
                            </div>
                            <div id="hiveplot" class="panel-collapse collapse">
                                <div id="graph-canvas"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var processingProxy = $.connection.hub.createHubProxy("ProcessingHub");
    processingProxy.on("clientListener", function (msg) {
        if (msg == "ProcessingComplete") {
            $(".MessageDisplay").prepend('<div class="alert alert-info">Completed Processing</div>');
            $(".MessageDisplayRunning").prepend('<div class="alert alert-success">Completed Processing</div>');
            @foreach(var a in machines)
            {
                @Html.Raw("loadCharts('" + a + "');");
            };

            $('#ajax-busy').hide();
        } else if (msg == "SignalReady") {
            $('#ajax-busy').hide();
        } else if (msg == "ProcessingUpdate")
        { 
            // do nothing
        } else {
            $(".MessageDisplay").prepend(msg);
            $(".MessageDisplayRunning").prepend(msg);
        }


    });

    // Processing Hub is loaded
    $.connection.hub.start().done(function () {
        processingProxy.invoke('SignalReady');
    })


    // Start Agents
    function startAgents() {
        $(".MessageDisplayRunning").html("");
        $('#ajax-busy').show();
        $.get("AgentSimulation/RunAsync");
    }
    
    $(document).ready(function () {
        // Block Interactions
        $(".MessageDisplayRunning").prepend('<div class="alert alert-success">Preparing System</div>');
        //$('#ajax-busy').show();
        // make make use of full size and hide overflow
        $('#main').removeClass("container").addClass("container-fluid").css("overflow-x", "hidden");
    });


    function loadGantt(orderId, stateId) {
        $.ajax({
            url: "AgentSimulation/ReloadGantt/" + orderId + "/" + stateId,
            async: true,
            context: document.body,
            beforeSend: function () {
                $('#ajax-busy').show();
            },
            success: function (msg) {
                $(".MessageDisplayRunning").html("");
                $('#ajax-busy').hide();

            },
            error: function () {
                $(document).ajaxError(function (xhr, ajaxOptions, thrownError) {
                    alert('status: ' +
                        ajaxOptions.status +
                        '-' +
                        ajaxOptions.statusText +
                        ' \n' +
                        'error:\n' +
                        ajaxOptions.responseText);
                });
            }
        }).done(function (data) { $('#ProductionGantt').html(data); });
    }

    function loadCharts(machine) {
        $.ajax({
            url: "AgentSimulation/MachineWorkload/" + machine,
            async: true,
            context: document.body,
            beforeSend: function () {
                $('#ajax-busy').show();
            },
            success: function (msg) {
                $(".MessageDisplayRunning").html("");
                $('#ajax-busy').hide();
            },
            error: function () {
                $(document).ajaxError(function (xhr, ajaxOptions, thrownError) {
                    alert('status: ' +
                        ajaxOptions.status +
                        '-' +
                        ajaxOptions.statusText +
                        ' \n' +
                        'error:\n' +
                        ajaxOptions.responseText);
                });
            }
        }).done(function (data) {
             $('#mwl_' + machine.replace(" ","")).html(data);
        });
    }

    /**
 * Created by eamonnmaguire on 05/01/2014.
 */
    d3.hive={},d3.hive.link=function(){function t(t,s){var u,h=a(r,this,t,s),i=a(n,this,t,s);h.a>i.a&&(u=i,i=h,h=u),i.a-h.a>Math.PI&&(h.a+=2*Math.PI);var e=h.a+(i.a-h.a)/3,c=i.a-(i.a-h.a)/3;return h.r0-h.r1||i.r0-i.r1?"M"+Math.cos(h.a)*h.r0+","+Math.sin(h.a)*h.r0+"L"+Math.cos(h.a)*h.r1+","+Math.sin(h.a)*h.r1+"C"+Math.cos(e)*h.r1+","+Math.sin(e)*h.r1+" "+Math.cos(c)*i.r1+","+Math.sin(c)*i.r1+" "+Math.cos(i.a)*i.r1+","+Math.sin(i.a)*i.r1+"L"+Math.cos(i.a)*i.r0+","+Math.sin(i.a)*i.r0+"C"+Math.cos(c)*i.r0+","+Math.sin(c)*i.r0+" "+Math.cos(e)*h.r0+","+Math.sin(e)*h.r0+" "+Math.cos(h.a)*h.r0+","+Math.sin(h.a)*h.r0:"M"+Math.cos(h.a)*h.r0+","+Math.sin(h.a)*h.r0+"C"+Math.cos(e)*h.r1+","+Math.sin(e)*h.r1+" "+Math.cos(c)*i.r1+","+Math.sin(c)*i.r1+" "+Math.cos(i.a)*i.r1+","+Math.sin(i.a)*i.r1}function a(t,a,r,n){var e=t.call(a,r,n),c=+("function"==typeof s?s.call(a,e,n):s)+i,o=+("function"==typeof u?u.call(a,e,n):u),M=u===h?o:+("function"==typeof h?h.call(a,e,n):h);return{r0:o,r1:M,a:c}}var r=function(t){return t.source},n=function(t){return t.target},s=function(t){return t.angle},u=function(t){return t.radius},h=u,i=-Math.PI/2;return t.source=function(a){return arguments.length?(r=a,t):r},t.target=function(a){return arguments.length?(n=a,t):n},t.angle=function(a){return arguments.length?(s=a,t):s},t.radius=function(a){return arguments.length?(u=h=a,t):u},t.startRadius=function(a){return arguments.length?(u=a,t):u},t.endRadius=function(a){return arguments.length?(h=a,t):h},t};

// Use abstract equality == for "is number" test
    function isEven(n) {
        return n == parseFloat(n)? !(n%2) : void 0;
    }
    function randomIntFromInterval(min,max)
    {
        return Math.floor(Math.random()*(max-min+1)+min);
    }
    var graph = (function () {

            return {
                create_hive_visualization: function(placement,  width, height) {
                    var innerRadius = 40,
                        outerRadius = 360;
                    var angle = d3.scale.ordinal().domain(d3.range(9)).rangePoints([0, 2 * Math.PI]),
                        radius = d3.scale.linear().range([innerRadius, outerRadius]),
                        color = d3.scale.ordinal().range(["rgba(246, 167, 30, 0.4)", // orange
                            "rgba(227, 76, 87, 0.1)", // light red
                            "rgba(205, 10, 10, 0.5)", // dark red
                            "rgba(7, 52, 74, 0.6)", // midnight blue
                            "rgba(184, 224, 112, 0.6)", // yellow green

                            //"rgba(107, 166, 81, 0.6)", // dark green
                            //"rgba(98, 186, 184, 0.6)", // aqua
                            "rgba(83, 172, 170, 0.4)", // light turquise
                            //"rgba(30, 123, 119, 0.6)", // light blue 
                            "rgba(125, 180, 86, 0.3)", // green
                            "rgba(32, 84, 96, 0.6)", // blue dianne
                            "rgba(4, 45, 64, 0.6)", // blue whale
                            "rgba(7, 52, 74, 0.6)" // midnight blue
                        ]);
                    var names = ["Contract", "System", "Stock", "Machine", "Directory", "Comunication", "Production","Dispo"]
                    var links = [ ];
                    var c = 0;
                    var nodes = [
                        // System 1/1100
                        {x: 1, y: .55 }
                    ];
                    // Contract 100/200
                    let dist = .1/40;
                    let y = .1/100+0.6;
                    for (var i = 1; i < 101; i++) {
                        nodes.push({x: 0, y: y });
                        y=y+dist;
                    } // 1 -> 100 
                    // Machine Agent 5/167250
                    dist = 0.025;
                    y = 0.55;
                    for (var i = 1; i < 6; i++) {
                        nodes.push({x: 3, y: y});
                        y=y+dist;
                    } // 100 -> 105
                    // Stock Agent 26/7315
                    dist = .1/40;
                    y = .1/26+0.15;
                    for (var i = 1; i < 27; i++) {
                        nodes.push({x: 2, y: y});
                        y=y+dist;
                    } // 106 -> 132
                    // Directory Agent  1/1655            
                    nodes.push({x: 4, y: .8 });
                    // Production Agent 1000/9050
                    dist = 0.35/1000;
                    y = .55-0.35/1000; 
                    c = 0;
                    for (var i = 1; i < 1001; i++) {
                        nodes.push({x: 6, y: y});
                        y=y+dist; 
                        c++;
                        if(c == 20){
                            links.push({source: nodes[i+132], target: nodes[132]});
                            c=0;
                        }
                    } // 134 - 1133
                    // Communication 3/178143
                    nodes.push({x: 5, y: 1-.1 });
                    nodes.push({x: 5, y: 1-.125 });
                    nodes.push({x: 5, y: 1-.15 });
                    // Dipso 3200/8100
                    dist = .9/3200;
                    y = .9/3200;
                    c = 0;
                    // Dispo to Production
                    for (var i = 1; i < 3201; i++) {
                        nodes.push({x: 7, y: y});
                        y=y+dist;
                        c++;
                        if(c == 3){
                            links.push({source: nodes[i+1134], target: nodes[randomIntFromInterval(135,1132)]});
                            links.push({source: nodes[i+1134], target: nodes[0]});
                            c=0;
                        }
                    } // 1134 --> 4334
                    // Machine to Production
                    for (var i = 101; i < 106; i++) {
                        for(var j = 1; j < 40; j++) {
                            links.push({source: nodes[i], target: nodes[randomIntFromInterval(135,1132)] });
                        } 
                        // Dir to Machine
                        links.push({source: nodes[132], target: nodes[i]});
                    }
                    // Contract to System
                    for (var i = 1; i < 21; i++) {
                        links.push({source: nodes[0], target: nodes[i*5] });
                    }
                    // Contract to Dispo
                    for (var i = 1; i < 100; i++) {
                        links.push({source: nodes[i], target: nodes[randomIntFromInterval(1134,4330)] });
                        links.push({ source: nodes[i], target: nodes[randomIntFromInterval(1134, 4330)] });
                        links.push({ source: nodes[i], target: nodes[randomIntFromInterval(1134, 4330)] });
                    }
                    // Stock to Dispo
                    for (var i = 1; i < 320; i++) {
                        links.push({source: nodes[randomIntFromInterval(106,131)], target: nodes[(i*10)+1132]})
                    }
                    // Comunication to Production and Dispo
                    for (var i = 0; i < 3; i++) {
                        for(var j = 1; j < 50; j++) {
                            links.push({source: nodes[1133+i], target: nodes[randomIntFromInterval(135,1132)] });
                        }
                        // Dictionary to Communication
                        links.push({source: nodes[132], target: nodes[i+1133]});
                    }
                    // Stock to Production
                    for (var i = 1; i < 27; i++) {
                        for(var j = 1; j < 10; j++) {
                            links.push({source: nodes[randomIntFromInterval(135,1132)], target: nodes[105+i] });
                        }
                        links.push({source: nodes[105+i], target: nodes[0] });
                    }
                    // Contract to Dispo
                    for(var i = 101; i < 106; i++)  {
                        links.push({source: nodes[i], target: nodes[0] });
                    }
                    // Comunication to Machine
                    links.push({source: nodes[1133], target: nodes[101] });
                    links.push({source: nodes[1133], target: nodes[102] }); 
                    links.push({source: nodes[1134], target: nodes[103] });
                    links.push({source: nodes[1135], target: nodes[104] }); 
                    links.push({source: nodes[1135], target: nodes[105] }); 
            
            
                    var svg = d3.select(placement).append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                    svg.selectAll(".axis")
                        .data(d3.range(8))
                        .enter().append("line")
                        .attr("class", "hive-axis")
                        .attr("transform", function(d) { return "rotate(" + degrees(angle(d)) + ")"; })
                        .attr("x1", radius.range()[0])
                        // determ the length here
                        .attr("x2", radius.range()[1]);

                    svg.selectAll("text")
                        .data(d3.range(8))
                        .enter().append("text").attr("transform", function(d) { return "rotate(" + degrees(angle(d)) + ")"; }).text(function(d) {
                            return names[d]
                            //'Axis '+d;
                        }).attr('x', radius.range()[1]-20).attr('y', 15);

                    svg.selectAll(".link")
                        .data(links)
                        .enter().append("path")
                        .attr("class", "link")
                        .attr("d", d3.hive.link()
                            .angle(function(d) { return angle(d.x); })
                            .radius(function(d) { return radius(d.y); }))
                        .style("stroke", function(d) { return color(d.source.x); });

                    svg.selectAll(".node")
                        .data(nodes)
                        .enter().append("circle")
                        .attr("class", "node")
                        .attr("transform", function(d) { return "rotate(" + degrees(angle(d.x)) + ")"; })
                        .attr("cx", function(d) { return radius(d.y); })
                        .attr("r", 5)
                        .style("fill", function(d) { return color(d.x); });

                    function degrees(radians) {
                        return radians / Math.PI * 180 - 90;
                    }

                }
            }
    
        })
        ();

    graph.create_hive_visualization('#graph-canvas', 800, 800);
</script>