@model IEnumerable<Master40.DB.Models.SimulationConfiguration>

@{
    ViewData["Title"] = "Index";
    Layout = "_Layout";
    int maxValue = 0;
}


<h2>Index</h2>

<p>
    <a asp-action="Create" asp-controller="SimulationConfigurations" data-target="#modal-container"
       data-toggle="modal" class="btn btn-default">
        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span> Create
    </a>
</p>
<div class="container-fluid">
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Time)
                </th>
                <!--th>
                    @Html.DisplayNameFor(model => model.MaxCalculationTime)
                </th -->
                <th>
                    @Html.DisplayNameFor(model => model.Lotsize)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.OrderQuantity)
                </th>
                <!--th>
                    @Html.DisplayNameFor(model => model.TimeSpanForOrders)
                </th-->
                <th>
                    @Html.DisplayNameFor(model => model.Seed)
                </th>
                <th  style="text-align: right">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <!-- td>
                        @Html.DisplayFor(modelItem => item.Time)
                    </td -->
                    <td>
                        @Html.DisplayFor(modelItem => item.MaxCalculationTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Lotsize)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderQuantity)
                    </td>
                    <!--td>
                        @Html.DisplayFor(modelItem => item.TimeSpanForOrders)
                    </td -->
                    <td>
                        @Html.DisplayFor(modelItem => item.Seed)
                    </td>
                    <td style="text-align: right">
                        <a id="@item.Id" asp-action="Details" asp-controller="SimulationConfigurations" asp-route-id="@item.Id"
                           data-target="#modal-container" data-toggle="modal" class="btn btn-default">
                            <span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span>
                        </a>
                        <a id="@item.Id" asp-action="Edit" asp-controller="SimulationConfigurations" asp-route-id="@item.Id"
                           data-target="#modal-sub-container" data-toggle="modal" class="btn btn-default">
                            <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>
                        </a>

                        <a class="btn btn-default btn-xs simbtn ladda-button" id="decentral-ladda-btn_@Html.Raw(item.Id)" data-style="zoom-in" asp-controller="SimulationConfigurations" asp-action="Decentral" asp-route-id="@item.Id" onclick=" growlMsg('Simulation Started')">
                            <span class="ladda-label">
                                <i class="fa fa-ravelry fa-2x"></i>Run <span class="badge">@Html.DisplayFor(modelItem => item.DecentralRuns)</span>
                            </span>
                        </a>
                        <a class="btn btn-default btn-xs simbtn ladda-button" id="central-ladda-btn_@Html.Raw(item.Id)" data-style="zoom-in" asp-controller="SimulationConfigurations" asp-action="Central" asp-route-id="@item.Id" onclick=" growlMsg('Simulation Started')">
                            <span class="ladda-label">
                                <i class="fa fa-magic fa-2x"></i>Run <span class="badge">@Html.DisplayFor(modelItem => item.CentralRuns)</span>
                            </span>
                        </a>
                        <a asp-action="Index" asp-route-id="@item.Id" asp-controller="SimulationCompare" class="btn btn-default btn-xs">                                
                            Compare <i class="fa fa-tachometer fa-2x"></i>
                        </a>
                    </td>
                </tr>
                <tr>
                    <td colspan="6">
                        <div class="row">
                            <div class="col-md-3">Decentral</div>
                            <div class="col-md-9">
                                <div class="progress">
                                    <div id="@Html.Raw(item.Id)PogressDecentral" class="progress-bar" role="progressbar" aria-valuenow="0"
                                         aria-valuemin="0" aria-valuemax="@item.OrderQuantity" style="width:0%">
                                        0%
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">Central</div>
                            <div class="col-md-9">
                                <div class="progress">
                                    <div id="@Html.Raw(item.Id)PogressCentral" class="progress-bar" role="progressbar" aria-valuenow="0"
                                         aria-valuemin="0" aria-valuemax="@item.OrderQuantity" style="width:0%">
                                        0%
                                    </div>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    <div id="modal-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class='loading' />
            </div>
        </div>
    </div>
    <div id="modal-sub-container" class="modal fade hidden-print" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

            </div>
        </div>
    </div>
<script>

    $(document).ready(function () {
        // Block Interactions
        //Ladda.bind( '.simbtn' );
        $('.simbtn').click(function(e) {
            e.preventDefault();
            var l = Ladda.create(document.querySelector("#" + e.currentTarget.id));
            l.start();
            e.currentTarget.style.background = 'grey';
            $.get(e.currentTarget.href);
                //.always(function() { l.stop(); })
            //return false;
        });


    });
    var processingProxy = $.connection.hub.createHubProxy("ProcessingHub");


    processingProxy.on("clientListener", function (mstype, simId, count, simType) {
        if (mstype == "ProcessingUpdate") {
            //growlMsg(mstype);
            let selector = "#" + simId + "Pogress" + simType;
            $(selector).css('width', count + '%').attr('aria-valuenow', count);
            $(selector).text(count + "%");
        }
        if (mstype == "ProcessingComplete") {
            growlMsg("Decentral Run Compleated")
            var l = Ladda.create(document.querySelector("#decentral-ladda-btn_" + simId ));
            l.toggle();
            $("#decentral-ladda-btn_" + simId ).css('background', 'white');
        }
        if (mstype == "MrpProcessingComplete") {
            growlMsg("Central MRP Run Compleated")
            var l = Ladda.create(document.querySelector("#central-ladda-btn_" + simId));
            l.toggle();
            $("#central-ladda-btn_" + simId).css('background', 'white');
        } else {
            growlMsg(mstype);
        }
    });

    // Processing Hub is loaded
    $.connection.hub.start().done(function () {
        processingProxy.invoke('SystemReady');
    })

    function growlMsg(msg) {
        $.bootstrapGrowl(msg, {
            ele: 'body', // which element to append to
            type: 'info', // (null, 'info', 'danger', 'success')
            offset: { from: 'bottom', amount: 10 }, // 'top', or 'bottom'
            align: 'right', // ('left', 'right', or 'center')
            width: 400, // (integer, or 'auto')
            height: 'auto',
            delay: 4000, // Time while the message will be displayed
            allow_dismiss: false, // If true then will display a cross to close the popup.
            stackup_spacing: 10 // spacing between consecutively stacked growls.
        });
    }


</script>

